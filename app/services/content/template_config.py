from enum import Enum
from typing import Dict, List, Optional
from pydantic import BaseModel, Field

from app.constants import DEFAULT_TEMPLATE_CLIENT_ID


class FieldSource(str, Enum):
    """Enum defining where a template field comes from"""

    USER_INPUT = "user_input"  # Collected directly from the user via WhatsApp
    AI_GENERATED = "ai_generated"  # Generated by AI based on user inputs
    EXTERNAL_SERVICE = (
        "external_service"  # Retrieved from external service (e.g., Unsplash)
    )
    DERIVED = "derived"  # Derived from other fields


class FieldConfig(BaseModel):
    """Configuration for a template field"""

    source: FieldSource
    required: bool = True
    prompt: Optional[str] = None  # Prompt to show when collecting from user
    max_words: Optional[int] = None  # For validation of user inputs
    fallback: Optional[str] = None  # Fallback value if not provided
    depends_on: List[str] = Field(default_factory=list)  # Fields this depends on
    workflow_state: Optional[str] = None  # State to set when collecting this field
    is_template_field: bool = True  # Whether this field is used in template generation


class TemplateConfig(BaseModel):
    """Configuration for a template"""

    type: str
    fields: Dict[str, FieldConfig]
    platforms: List[str] = Field(default_factory=list)
    is_video: bool = False  # Flag to indicate if this is a video-based template


# Define the centralized template configuration
TEMPLATE_CONFIGS = {
    # Instagram Templates
    "instagram_reels": TemplateConfig(
        type="reels",
        platforms=["instagram"],
        is_video=True,
        fields={
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your reels post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
            "video_background": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable video for your reels post.",
                required=True,
            ),
        },
    ),
    "instagram_tips": TemplateConfig(
        type="tips",
        platforms=["instagram"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable image for your tips post.",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your tips post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
        },
    ),
    "instagram_promo": TemplateConfig(
        type="promo",
        platforms=["instagram"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable image for your promotion.",
                required=True,
            ),
            "destination_name": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the destination name (5 words or less):",
                max_words=5,
                workflow_state="WAITING_FOR_DESTINATION",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your promotion:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
            "price_text": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the price or promotion details (e.g., '$99', '50% off'):",
                max_words=5,
                workflow_state="WAITING_FOR_PRICE",
                required=True,
            ),
        },
    ),
    "instagram_destination": TemplateConfig(
        type="destination",
        platforms=["instagram"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable image for your destination.",
                required=True,
            ),
            "destination_name": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the destination name (5 words or less):",
                max_words=5,
                workflow_state="WAITING_FOR_DESTINATION",
                required=True,
            ),
            "post_caption": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your destination post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
                is_template_field=False,  # This field is only for the social media post
            ),
        },
    ),
    "instagram_events": TemplateConfig(
        type="events",
        platforms=["instagram"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please upload an image for your event:",
                workflow_state="WAITING_FOR_MEDIA_UPLOAD",
                required=True,
            ),
            "event_name": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the event name (5 words or less):",
                max_words=5,
                workflow_state="WAITING_FOR_EVENT_NAME",
                required=True,
            ),
            "post_caption": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your event post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
                is_template_field=False,  # This field is only for the social media post
            ),
        },
    ),
    "instagram_seasonal": TemplateConfig(
        type="seasonal",
        platforms=["instagram"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable image for your seasonal post.",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your seasonal post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
        },
    ),
    # LinkedIn Templates
    "linkedin_tips": TemplateConfig(
        type="tips",
        platforms=["linkedin"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable image for your LinkedIn tips.",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your LinkedIn tips post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
        },
    ),
    "linkedin_seasonal": TemplateConfig(
        type="seasonal",
        platforms=["linkedin"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable image for your seasonal LinkedIn post.",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your seasonal LinkedIn post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
        },
    ),
    "linkedin_events": TemplateConfig(
        type="events",
        platforms=["linkedin"],
        fields={
            "main_image": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please upload an image for your LinkedIn event:",
                workflow_state="WAITING_FOR_MEDIA_UPLOAD",
                required=True,
            ),
            "event_name": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the event name (5 words or less):",
                max_words=5,
                workflow_state="WAITING_FOR_EVENT_NAME",
                required=True,
            ),
            "post_caption": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your LinkedIn event post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
                is_template_field=False,  # This field is only for the social media post
            ),
        },
    ),
    # TikTok Templates
    "tiktok_promo": TemplateConfig(
        type="promo",
        platforms=["tiktok"],
        is_video=True,
        fields={
            "video_background": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable video for your TikTok promotion.",
                required=True,
            ),
            "destination_name": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the destination name (5 words or less):",
                max_words=5,
                workflow_state="WAITING_FOR_DESTINATION",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your TikTok promotion:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
            "price_text": FieldConfig(
                source=FieldSource.USER_INPUT,
                prompt="Please enter the price or promotion details (e.g., '$99', '50% off'):",
                max_words=5,
                workflow_state="WAITING_FOR_PRICE",
                required=True,
            ),
        },
    ),
    "tiktok_generic": TemplateConfig(
        type="generic",
        platforms=["tiktok"],
        is_video=True,
        fields={
            "video_background": FieldConfig(
                source=FieldSource.EXTERNAL_SERVICE,
                prompt="We'll find a suitable video for your TikTok post.",
                required=True,
            ),
            "caption_text": FieldConfig(
                source=FieldSource.AI_GENERATED,
                prompt="Please provide a brief description for your TikTok post:",
                workflow_state="WAITING_FOR_CAPTION",
                required=True,
            ),
        },
    ),
}


def get_template_config(platform: str, content_type: str) -> Optional[TemplateConfig]:
    """Get template configuration for a platform and content type"""
    # First try direct lookup
    template_key = f"{platform}_{content_type}"
    if template_key in TEMPLATE_CONFIGS:
        return TEMPLATE_CONFIGS[template_key]

    # If not found, look through all configs
    for template_key, config in TEMPLATE_CONFIGS.items():
        if (
            platform in config.platforms
            and template_key.startswith(f"{platform}_")
            and template_key.endswith(f"_{content_type}")
        ):
            return config

    return None


def get_required_keys(platform: str, content_type: str) -> List[str]:
    """Get required keys for a template"""
    config = get_template_config(platform, content_type)
    if not config:
        return []

    return [
        key
        for key, field_config in config.fields.items()
        if not hasattr(field_config, "required") or field_config.required
    ]


def get_field_config(
    platform: str, content_type: str, field_name: str
) -> Optional[FieldConfig]:
    """Get configuration for a specific field"""
    config = get_template_config(platform, content_type)
    if not config or field_name not in config.fields:
        return None

    return config.fields[field_name]


def build_template_id(
    platform: str, content_type: str, client_id: str = DEFAULT_TEMPLATE_CLIENT_ID
) -> str:
    """Build a template ID from platform, content type and client ID"""
    return f"{platform}_{client_id}_{content_type}"
